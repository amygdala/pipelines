name: Automl import data for tables
inputs:
- name: path
  type: String
- name: gcp_project_id
  type: String
- name: gcp_region
  type: String
- name: display_name
  type: String
- name: api_endpoint
  type: String
  optional: true
outputs:
- name: display_name
  type: String
implementation:
  container:
    image: python:3.7
    command:
    - python3
    - -u
    - -c
    - |
      from typing import NamedTuple

      def automl_import_data_for_tables(
        # dataset_path,
        path: str,
        gcp_project_id: str,
        gcp_region: str,
        display_name: str,
        api_endpoint: str = None,
      ) -> NamedTuple('Outputs', [('display_name', str)]):
        import sys
        import subprocess
        subprocess.run([sys.executable, '-m', 'pip', 'install', 'google-cloud-automl==0.9.0', '--quiet', '--no-warn-script-location'], env={'PIP_DISABLE_PIP_VERSION_CHECK': '1'}, check=True)

        import google
        import logging
        from google.api_core.client_options import ClientOptions
        from google.cloud import automl_v1beta1 as automl

        def list_column_specs(client,
                              dataset_display_name,
                              filter_=None):
            """List all column specs."""
            result = []

            # List all the table specs in the dataset
            response = client.list_column_specs(
                dataset_display_name=dataset_display_name, filter_=filter_)
            logging.info("List of column specs:")
            for column_spec in response:
                # Display the column_spec information.
                logging.info("Column spec name: {}".format(column_spec.name))
                logging.info("Column spec id: {}".format(column_spec.name.split("/")[-1]))
                logging.info("Column spec display name: {}".format(column_spec.display_name))
                logging.info("Column spec data type: {}".format(column_spec.data_type))

                result.append(column_spec)
            return result

        logging.getLogger().setLevel(logging.INFO)  # TODO: make level configurable

        # TODO: we could instead check for region 'eu' and use 'eu-automl.googleapis.com:443'endpoint
        # in that case, instead of requiring endpoint to be specified.
        if api_endpoint:
          client_options = ClientOptions(api_endpoint=api_endpoint)
          client = automl.TablesClient(project=gcp_project_id, region=gcp_region,
            client_options=client_options)
        else:
          client = automl.TablesClient(project=gcp_project_id, region=gcp_region)

        response = None
        if path.startswith('bq'):
          response = client.import_data(
            dataset_display_name=display_name, bigquery_input_uri=path
          )
        else:
          # Get the multiple Google Cloud Storage URIs.
          input_uris = path.split(",")
          response = client.import_data(
            dataset_display_name=display_name,
            gcs_input_uris=input_uris
            )
        logging.info("Processing import... This can take a while.")
        # synchronous check of operation status.
        logging.info("Data imported. {}".format(response.result()))
        logging.info("Response metadata: {}".format(response.metadata))
        logging.info("Operation name: {}".format(response.operation.name))

        # now list the inferred col schema
        list_column_specs(client, display_name)
        return (display_name)

      def _serialize_str(str_value: str) -> str:
          if not isinstance(str_value, str):
              raise TypeError('Value "{}" has type "{}" instead of str.'.format(str(str_value), str(type(str_value))))
          return str_value

      import argparse
      _parser = argparse.ArgumentParser(prog='Automl import data for tables', description='')
      _parser.add_argument("--path", dest="path", type=str, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("--gcp-project-id", dest="gcp_project_id", type=str, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("--gcp-region", dest="gcp_region", type=str, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("--display-name", dest="display_name", type=str, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("--api-endpoint", dest="api_endpoint", type=str, required=False, default=argparse.SUPPRESS)
      _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=1)
      _parsed_args = vars(_parser.parse_args())
      _output_files = _parsed_args.pop("_output_paths", [])

      _outputs = automl_import_data_for_tables(**_parsed_args)

      if not hasattr(_outputs, '__getitem__') or isinstance(_outputs, str):
          _outputs = [_outputs]

      _output_serializers = [
          _serialize_str
      ]

      import os
      for idx, output_file in enumerate(_output_files):
          try:
              os.makedirs(os.path.dirname(output_file))
          except OSError:
              pass
          with open(output_file, 'w') as f:
              f.write(_output_serializers[idx](_outputs[idx]))
    args:
    - --path
    - inputValue: path
    - --gcp-project-id
    - inputValue: gcp_project_id
    - --gcp-region
    - inputValue: gcp_region
    - --display-name
    - inputValue: display_name
    - if:
        cond:
          isPresent: api_endpoint
        then:
        - --api-endpoint
        - inputValue: api_endpoint
    - '----output-paths'
    - outputPath: display_name
